namespace Toone.V3.DevSystem.Common
{
    /// <summary>
    /// 计算机硬件处理类
    /// </summary>
    public class HardwareHandler
    {
        public enum WMIPath
        {
            // 硬件
            Win32_Processor,     // CPU 处理器
            Win32_PhysicalMemory,  // 物理内存条
            Win32_Keyboard,     // 键盘
            Win32_PointingDevice,  // 点输入设备，包括鼠标。
            Win32_FloppyDrive,    // 软盘驱动器
            Win32_DiskDrive,     // 硬盘驱动器
            Win32_CDROMDrive,    // 光盘驱动器
            Win32_BaseBoard,     // 主板
            Win32_BIOS,       // BIOS 芯片
            Win32_ParallelPort,   // 并口
            Win32_SerialPort,    // 串口
            Win32_SerialPortConfiguration, // 串口配置
            Win32_SoundDevice,    // 多媒体设置，一般指声卡。
            Win32_SystemSlot,    // 主板插槽 (ISA & PCI & AGP)
            Win32_USBController,   // USB 控制器
            Win32_NetworkAdapter,  // 网络适配器
            Win32_NetworkAdapterConfiguration, // 网络适配器设置
            Win32_Printer,      // 打印机
            Win32_PrinterConfiguration, // 打印机设置
            Win32_PrintJob,     // 打印机任务
            Win32_TCPIPPrinterPort, // 打印机端口
            Win32_POTSModem,     // MODEM
            Win32_POTSModemToSerialPort, // MODEM 端口
            Win32_DesktopMonitor,  // 显示器
            Win32_DisplayConfiguration, // 显卡
            Win32_DisplayControllerConfiguration, // 显卡设置
            Win32_VideoController, // 显卡细节。
            Win32_VideoSettings,  // 显卡支持的显示模式。
            // 操作系统
            Win32_TimeZone,     // 时区
            Win32_SystemDriver,   // 驱动程序
            Win32_DiskPartition,  // 磁盘分区
            Win32_LogicalDisk,   // 逻辑磁盘
            Win32_LogicalDiskToPartition,   // 逻辑磁盘所在分区及始末位置。
            Win32_LogicalMemoryConfiguration, // 逻辑内存配置
            Win32_PageFile,     // 系统页文件信息
            Win32_PageFileSetting, // 页文件设置
            Win32_BootConfiguration, // 系统启动配置
            Win32_ComputerSystem,  // 计算机信息简要
            Win32_OperatingSystem, // 操作系统信息
            Win32_StartupCommand,  // 系统自动启动程序
            Win32_Service,     // 系统安装的服务
            Win32_Group,      // 系统管理组
            Win32_GroupUser,    // 系统组帐号
            Win32_UserAccount,   // 用户帐号
            Win32_Process,     // 系统进程
            Win32_Thread,      // 系统线程
            Win32_Share,      // 共享
            Win32_NetworkClient,  // 已安装的网络客户端
            Win32_NetworkProtocol, // 已安装的网络协议
        }

        /// <summary>
        /// 获取操作系统信息
        /// </summary>
        public static string GetOperatingSystemInfo()
        {
            string result = string.Empty;
            try
            {
                ManagementClass mc = new ManagementClass(WMIPath.Win32_OperatingSystem.ToString());
                ManagementObjectCollection moc = mc.GetInstances();
                foreach (ManagementObject mo in moc)
                {
                    result = string.Format("{0} {1} {2}", mo.Properties["Caption"].Value,
                        mo.Properties["Version"].Value, mo.Properties["CSDVersion"].Value);
                }
                moc.Dispose();
                mc.Dispose();
            }
            catch (Exception ex)
            {
                LogService.Instance.WriteException("获取操作系统信息失败：", ex);
            }
            return result;
        }

        /// <summary>
        /// 操作系统类型：32/64bit
        /// </summary>
        public static string GetBitOperatingSystem()
        {
            var typeBit = Environment.Is64BitOperatingSystem;
            string result = typeBit ? "64位操作系统" : "32位操作系统";

            return result;
        }

        /// <summary>
        /// 获取CPU型号信息
        /// </summary>
        /// <returns></returns>
        public static string GetCpuInfo()
        {
            string result = string.Empty;
            try
            {
                ManagementClass mc = new ManagementClass(WMIPath.Win32_Processor.ToString());
                ManagementObjectCollection moc = mc.GetInstances();
                foreach (ManagementObject mo in moc)
                {
                    result = string.Format("{0}", mo.Properties["Name"].Value);
                }
                moc.Dispose();
                mc.Dispose();
            }
            catch (Exception ex)
            {
                LogService.Instance.WriteException("获取CPU信息失败：", ex);
            }
            return result;
        }

        /// <summary>
        /// 获取系统物理内存
        /// </summary>
        /// <returns></returns>
        public static string GetSystemMemory()
        {
            string result = string.Empty;
            try
            {
                double dbSystemMemory = 0;
                ManagementClass mc = new ManagementClass(WMIPath.Win32_PhysicalMemory.ToString());
                ManagementObjectCollection moc = mc.GetInstances();
                foreach (ManagementObject mo in moc)
                {
                    var capacity = mo.Properties["Capacity"].Value.ToString();
                    dbSystemMemory +=
                        (Math.Round(Int64.Parse(capacity) / 1024 / 1024 / 1024.0, 1));
                }
                result = string.Format("{0}G", dbSystemMemory);
                moc.Dispose();
                mc.Dispose();
            }
            catch (Exception ex)
            {
                LogService.Instance.WriteException("获取系统物理内存失败：", ex);
            }
            return result;
        }

        /// <summary>
        /// 获取IP地址
        /// </summary>
        public static string GetNetworkInfo()
        {
            string result = string.Empty;
            try
            {
                ManagementClass mc = new ManagementClass(WMIPath.Win32_NetworkAdapterConfiguration.ToString());
                ManagementObjectCollection moc = mc.GetInstances();
                foreach (ManagementObject mo in moc)
                {
                    if ((bool)mo["IPEnabled"])
                    {
                        var ar = (Array)(mo.Properties["IpAddress"].Value);
                        result = string.Format("{0}", ar.GetValue(0));
                        break;
                    }
                }
                moc.Dispose();
                mc.Dispose();
            }
            catch (Exception ex)
            {
                LogService.Instance.WriteException("获取IP地址失败：", ex);
            }
            return result;
        }

        /// <summary>
        /// 获取主板信息
        /// </summary>
        public static string GetMainBoardInfo()
        {
            string result = string.Empty;
            try
            {
                ManagementClass mc = new ManagementClass(WMIPath.Win32_BaseBoard.ToString());
                ManagementObjectCollection moc = mc.GetInstances();
                foreach (ManagementObject mo in moc)
                {
                    result = string.Format("主板ID：{0}；制造商：{1}；型号：{2}；", mo.Properties["SerialNumber"].Value,
                        mo.Properties["Manufacturer"].Value, mo.Properties["Product"].Value);
                }
                moc.Dispose();
                mc.Dispose();
            }
            catch (Exception ex)
            {
                LogService.Instance.WriteException("获取主板信息失败：", ex);
            }
            return result;
        }

        /// <summary>
        /// 硬盘信息
        /// </summary>
        public static string GetDiskDriveInfo()
        {
            string result = string.Empty;
            try
            {
                ManagementClass mc = new ManagementClass(WMIPath.Win32_DiskDrive.ToString());
                ManagementObjectCollection moc = mc.GetInstances();
                foreach (ManagementObject mo in moc)
                {
                    result = string.Format("硬盘SN：{0}；型号：{1}；大小：{2}；", mo.Properties["SerialNumber"].Value,
                        mo.Properties["Model"].Value, Convert.ToDouble(mo.Properties["Size"].Value)/(1024*1024*1024));
                }
                moc.Dispose();
                mc.Dispose();
            }
            catch (Exception ex)
            {
                LogService.Instance.WriteException("获取硬盘信息失败：", ex);
            }
            return result;
        }
        
        /// <summary>
        /// 操作系统类型
        /// </summary>
        /// <returns></returns> 
        public static string GetSystemType()
        {
            string result = "";
            ManagementClass mc = new ManagementClass(WMIPath.Win32_ComputerSystem.ToString());
            ManagementObjectCollection moc = mc.GetInstances();
            foreach (ManagementObject mo in moc)
            {
                result = string.Format("{0}", mo["SystemType"]);//32/64bit
            }
            moc.Dispose();
            mc.Dispose();
            return result;
        }
        /// <summary>
        /// 获取操作系统的其他信息
        /// </summary>
        /// <returns></returns> 
        public static void GetOtherInfo()
        {
            //操作系统的登录用户名
            var userName = Environment.UserName;
            //获取计算机名
            var machineName = Environment.MachineName;
            //获取操作系统
            var operatingSystem = Environment.OSVersion.VersionString;
        }
        
    }
}
